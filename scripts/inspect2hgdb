#!/usr/bin/env python3

"""
Convert Inspect database to hgdb
Most of the implementation comes from the LegUp source code. Modifications are made to
move to modern Python and MySQL connector
"""
import MySQLdb
from MySQLdb import Connect
import argparse
import os
import getpass
import hgdb

# some constants used by legup
MYSQL_DATABASE_NAME = "legupDebug"


def get_input_args():
    parser = argparse.ArgumentParser(os.path.basename(__file__), description="Convert Inspect database to hgdb")
    parser.add_argument("output", help="Output symbol table")
    parser.add_argument("-p", help="Use password", action="store_true")
    parser.add_argument("-u", help="User name", type=str, default="root", required=False)
    parser.add_argument("-H", "--host", default="127.0.0.1", help="Inspect MySQL host", type=str, dest="host")
    parser.add_argument("-P", "--port", default=3306, help="Inspect MySQL port", type=int, dest="port")
    args = parser.parse_args()
    if args.p:
        password = getpass.getpass(f"MySQL password for {args.u}")
    else:
        password = "letmein"

    # get mysql connection here
    connection = Connect(host=args.host, user=args.u, password=password, database=MYSQL_DATABASE_NAME,
                         port=args.port)
    return connection, args.output


class LegUpDatabase:
    # notice that legup database is flat, which fits perfectly well with the sqlite version
    # of the symbol table. we will translate the symbol table
    def __init__(self, connection):
        self.cursor = MySQLdb.cursors.Cursor(connection)
        # making sure there is only one design
        self.top_id = self.__get_design_top()
        self.scopes = {}
        self.instance_hierarchy = {}
        self.instances = {}
        self.breakpoints = {}
        self.states = {}
        self.rtl_signals = {}
        self.variables = {}
        self.variable_link = {}

        # populate the information
        self.__get_scopes()
        self.__get_instances()
        self.__get_instance_hierarchy()
        self.__get_breakpoints()
        self.__get_rtl_vars()
        self.__get_variables()

    def __get_design_top(self):
        self.cursor.execute("SELECT id FROM Designs")
        res = self.cursor.fetchall()
        if len(res) == 0:
            raise RuntimeError("No design found")
        elif len(res) != 1:
            # design name selection currently not supported
            raise RuntimeError("More than one design found. Please specify design name")
        else:
            return res[0][0]

    def __get_scopes(self):
        # in LegUp they callit functions. we treat it as scopes
        self.cursor.execute("SELECT id, name FROM `Function` WHERE designId = %s", (self.top_id, ))
        res = self.cursor.fetchall()
        for func_id, func_name in res:
            self.scopes[func_id] = func_name

    def __get_instances(self):
        self.cursor.execute("SELECT id, instanceNum, functionId FROM Instance WHERE designID = %s", (self.top_id,))
        res = self.cursor.fetchall()
        for instance_id, instance_num, func_id in res:
            self.instances[instance_id] = (instance_num, func_id)

    def __get_instance_hierarchy(self):
        self.cursor.execute("SELECT instanceId, childInstanceId FROM InstanceChildren ic "
                            "INNER JOIN Instance i ON i.id = ic.instanceId WHERE  i.designId = %s", (self.top_id,))
        res = self.cursor.fetchall()
        for instance_id, child_instance_id in res:
            if instance_id not in self.instance_hierarchy:
                self.instance_hierarchy[instance_id] = set()
            self.instance_hierarchy[instance_id].add(child_instance_id)

    def __get_breakpoints(self):
        # the only breakpoints available is through IR instructions
        self.cursor.execute(
            "SELECT ir.id, functionId, startStateId, endStateId, filePath, lineNumber, columnNumber FROM "
            "IRInstr ir INNER JOIN `Function` f on f.id = ir.functionID WHERE f.designID = %s", (self.top_id,))
        res = self.cursor.fetchall()
        for ir_id, func_id, start_id, end_id, file, line, column in res:
            self.breakpoints[ir_id] = (func_id, start_id, end_id, file, line, column)

        # get states as well
        self.cursor.execute("SELECT s.id, belongingFunctionId, number FROM State s "
                            "INNER JOIN `Function` f ON s.belongingFunctionId = f.id WHERE f.designId = %s",
                            (self.top_id,))
        res = self.cursor.fetchall()
        for s_id, func_id, value in res:
            self.states[s_id] = (func_id, value)

    def __get_rtl_vars(self):
        # reads out all the RTL signals
        self.cursor.execute("SELECT r.id, functionID, signalName "
                            "FROM RtlSignal r INNER JOIN `Function` f ON f.id = r.functionId WHERE f.designId = %s",
                            (self.top_id,))
        res = self.cursor.fetchall()
        for r_id, func_id, name in res:
            self.rtl_signals[r_id] = (func_id, name)

    def __get_variables(self):
        # get all the variables
        # notice that we ignore global variables right now
        self.cursor.execute("SELECT id, name, functionId, filePath, lineNumber FROM Variable WHERE designId = %s",
                            (self.top_id,))
        res = self.cursor.fetchall()
        for id, name, func_id, file, line in res:
            if func_id is not None:
                self.variables[id] = (name, func_id, file, line)

    def __get_variable_link(self):
        # get the linking between variable and rtl signals
        self.cursor.execute(
            "SELECT vss.id, IRInstrId, v.id, rtlSignalId FROM VariableSourceSignal vss "
            "INNER JOIN VariableSource vs on vss.VariableSourceId = vs.id "
            "INNER JOIN Variable v on v.id = vs.variableId WHERE v.designId = %s", (self.top_id,))
        res = self.cursor.fetchall()
        for vss_id, var_id, rtl_id in res:
            self.variable_link[vss_id] = (var_id, rtl_id)

    def __get_top_instance_id(self):
        # top does not have parents
        tops = set()
        for inst_id in self.instances.keys():
            tops.add(inst_id)
        for inst_ids in self.instance_hierarchy.values():
            for inst_id in inst_ids:
                tops.remove(inst_id)

        assert len(tops) == 1, "Unable to find top instance"
        return tops.pop()

    def __get_instance_name(self, inst_id):
        _, function_id = self.instances[inst_id]
        name = self.scopes[function_id]
        return name

    def __resolve_instances(self, db: hgdb.DebugSymbolTable):
        # we assume there is only one function call in the parent scope, which
        # might not be true. this is good enough for a proof-of-concept
        instances_names = {}
        top_instance = self.__get_top_instance_id()
        instances_names[top_instance] = self.__get_instance_name(top_instance)
        for inst, children in self.instance_hierarchy.items():
            instance_name = instances_names[inst]
            for child in children:
                name = self.__get_instance_name(child)
                name = f"{instance_name}.{name}"
                instances_names[child] = name

        # create the instance table
        for inst_id, instance_name in instances_names.items():
            db.store_instance(inst_id, instance_name)

    def __resolve_breakpoints_scope(self, db: hgdb.DebugSymbolTable):
        # first reverse index the funcID <-> Instance id
        func_id_instances = {}
        for instance_id, (_, func_id) in self.instances.items():
            if func_id not in func_id_instances:
                func_id_instances[func_id] = set()
            func_id_instances[func_id].add(instance_id)

        # organize the breakpoints based on scope
        scopes = {}
        for ir_id, (func_id, start_id, end_id, file, line, column) in self.breakpoints.items():
            if func_id not in scopes:
                scopes[func_id] = []
            scopes[func_id].append((ir_id, start_id, end_id, file, line, column))

        # create scope
        scope_id = 0
        # notice that there could be duplication due to the flattening
        bp_id = 0
        # indexed by instance and then func_id
        scope_list = {}
        # map the file, line, column to bp id so that later one we can use it to map
        # context values
        bp_location = {}
        # Inspect generates lots of same IR with the same line, need to merge them
        bp_index = {}
        for func_id, bps in scopes.items():
            for ir_id, start_id, end_id, file, line, column in bps:
                for inst_id in func_id_instances[func_id]:
                    start_value = self.states[start_id][-1]
                    end_value = self.states[end_id][-1]

                    # compute condition
                    conditions = set()
                    for i in range(start_value, end_value + 1):
                        conditions.add(i)

                    entry = (func_id, inst_id, file, line, column)
                    if entry not in bp_index:
                        bp_index[entry] = set()
                    # merge them
                    bp_index[entry] = bp_index[entry].union(conditions)

        for (func_id, inst_id, file, line, column), conditions in bp_index.items():
            # this is a hardcoded value in inspect from the source code
            var = "cur_state"
            cond_strs = []
            for cond in conditions:
                cond_strs.append(f"({var} == {cond})")
            cond_str = " || ".join(cond_strs)
            db.store_breakpoint(bp_id, inst_id, file, line, column, cond_str)

            # store the location for mapping
            if func_id not in bp_location:
                bp_location[func_id] = {}
            bp_location[func_id][bp_id] = (file, line)

            if inst_id not in scope_list:
                scope_list[inst_id] = {}
            if func_id not in scope_list[inst_id]:
                scope_list[inst_id][func_id] = []
            scope_list[inst_id][func_id].append(bp_id)

            bp_id += 1

        scope_id = 0
        for scopes in scope_list.values():
            for func_id, scope in scopes.items():
                scope.sort(key=lambda b_id: bp_location[func_id][b_id])
                db.store_scope(scope_id, *scope)
                scope_id += 1

        return bp_location

    def __resolve_context_variable(self, db: hgdb.DebugSymbolTable, bp_location):
        for var_id, rtl_id in self.variable_link.values():
            var = self.variables[var_id]
            rtl = self.rtl_signals[rtl_id]
            var_name, func_id, file, line = var
            rtl_name = rtl[-1]
            # create variable
            db.store_variable(var_id, rtl_name)
            # need to find matching bp locations
            bps = bp_location[func_id]
            for bp_id, (bp_file, bp_line) in bps.items():
                if bp_file == file and bp_line >= line:
                    db.store_context_variable(var_name, bp_id, var_id)

    def convert(self, output):
        db = hgdb.DebugSymbolTable(output)
        # resolve instance names and stuff.
        self.__resolve_instances(db)

        bp_location = self.__resolve_breakpoints_scope(db)
        self.__resolve_context_variable(db, bp_location)


def main():
    connection, output_filename = get_input_args()
    legup_database = LegUpDatabase(connection)
    legup_database.convert(output_filename)


if __name__ == "__main__":
    main()
